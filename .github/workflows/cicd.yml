# é necessário criar as variáveis DEPLOY_HOST, DEPLOY_KEY, NOME_ARQUIVO_PEM e NOME_ARQUIVO_JAR.
# Settings -> Secrets and Variables -> Actions
#  New Respository Secret ou editar as existentes (NÃO é possível ver o valor das existentes!)
name: CI/CD para Spring Boot com Maven e publicação em EC2

# este arquivo será executado numa VM do github
on:
  push:
    branches: #branch 'alvo'. Ou seja, se algo mudar nela, a mínima mudança que seja, este arquivo de workflow será executado
      - main

jobs: # cada 'job' é um agrupamento de steps
  test: # primeiro grupo de steps
    runs-on: ubuntu-latest # aqui apenas indicamos onde o workflow será executado (em qual tipo de VM). No caso indicamos que será num ubuntu. Isso NÃO tem relação com o SO de sua EC2!

    steps: # cada 'step' é uma ação dentro de um grupo de steps
    - name: Atualização do código
      uses: actions/checkout@v2 # action que leva para a VM de execução do workflow os arquivos da branch alvo

    - name: Definindo a versão da JDK 
      uses: actions/setup-java@v2 # configura na VM uma versão do Java
      with:
        distribution: 'temurin' # ver opções em https://github.com/actions/setup-java?tab=readme-ov-file#supported-distributions
        java-version: '11'

    - name: Build com Maven
      run: mvn -f api-pets-completa/pom.xml clean package
      # com 'run' podemos executar qualquer comando de SO na VM de execução do workflow.
      # nesse caso, pedimos para gerar o .jar de uma aplicação Java
      # tivemos que fazer -f <caminho do pom> porque o projeto Java não está na raiz do repositório

    - name: Gerar artefato Github com o .jar gerado
      uses: actions/upload-artifact@v4 # essa action promove o envio de um ou mais arquivos para uma pasta temporária do github actions
      with:
        name: aplicacao # nome do arquivo ou conjunto de arquivos (veja ele depois em 'Recuperar artefato')
        path: api-pets-completa/target/*.jar # todos os arquivos .jar do diretório api-pets-completa/target

    - name: Gerar artefato Github com os arquivos .sh
      uses: actions/upload-artifact@v4        
      with:
        name: scripts  # nome do arquivo ou conjunto de arquivos (veja ele depois em 'Recuperar scripts')
        path: .github/scripts/*.sh # todos os arquivos .sh do diretório .github/scripts

  deploy:
    needs: test # segundo grupo de steps
    runs-on: ubuntu-latest

    steps:
    - name: Recuperar artefato
      uses: actions/download-artifact@v4  # essa action promove o download de um ou mais arquivos de uma pasta temporária do github actions
      with:
        name: aplicacao # nome do arquivo ou conjunto de arquivos que queremos recuperar
        path: ./ # diretório da VM de execução do workflow onde os arquivos recuperados ficarão

    - name: Recuperar scripts
      uses: actions/download-artifact@v4
      with:
        name: scripts
        path: ./        

    - name: Criar arquivo .pem a partir da variável DEPLOY_KEY e fazer o chmod 400 nele
      id: geracao-arquivo-pem
      run: |
        echo "${{ secrets.DEPLOY_KEY }}" >> $HOME/${{ secrets.NOME_ARQUIVO_PEM }}
        chmod 400 $HOME/${{ secrets.NOME_ARQUIVO_PEM }}

    - name: Enviar o JAR p/ a EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ubuntu
        key: ${{ secrets.DEPLOY_KEY }}
        source: "./*.jar"
        target: "/home/ubuntu/deploy-api/"

    - name: Enviar os Scripts p/ a EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ubuntu
        key: ${{ secrets.DEPLOY_KEY }}
        source: "./*.sh"
        target: "/home/ubuntu/deploy-api/"

    - name: Conectar via SSH à EC2 privada para implantar e reiniciar a API
      run: |
        ssh -o StrictHostKeyChecking=no -i $HOME/${{ secrets.NOME_ARQUIVO_PEM }} ubuntu@${{ secrets.DEPLOY_HOST }} '
          scp -i ${{ secrets.NOME_ARQUIVO_PEM }} deploy-api/${{ secrets.NOME_ARQUIVO_JAR }} ubuntu@${{ secrets.IP_PRIVADO_EC2 }}:/home/ubuntu/deploy-api
          scp -i ${{ secrets.NOME_ARQUIVO_PEM }} deploy-api/*.sh ubuntu@${{ secrets.IP_PRIVADO_EC2 }}:/home/ubuntu/deploy-api
          ssh -i ${{ secrets.NOME_ARQUIVO_PEM }} ubuntu@${{ secrets.IP_PRIVADO_EC2 }} "sh /home/ubuntu/deploy-api/api-restart.sh"          
        '
